// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/cron/workers/ijob.go

// Package mock_workers is a generated GoMock package.
package mock_workers

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// GetFrequency mocks base method.
func (m *MockWorker) GetFrequency() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrequency")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetFrequency indicates an expected call of GetFrequency.
func (mr *MockWorkerMockRecorder) GetFrequency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrequency", reflect.TypeOf((*MockWorker)(nil).GetFrequency))
}

// Run mocks base method.
func (m *MockWorker) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockWorkerMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWorker)(nil).Run), ctx)
}
