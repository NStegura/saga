// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: productsapi.proto

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductsApi_GetProducts_FullMethodName    = "/productsapi.ProductsApi/GetProducts"
	ProductsApi_GetProductInfo_FullMethodName = "/productsapi.ProductsApi/GetProductInfo"
	ProductsApi_GetPing_FullMethodName        = "/productsapi.ProductsApi/GetPing"
)

// ProductsApiClient is the client API for ProductsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsApiClient interface {
	GetProducts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Products, error)
	GetProductInfo(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*Product, error)
	GetPing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error)
}

type productsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsApiClient(cc grpc.ClientConnInterface) ProductsApiClient {
	return &productsApiClient{cc}
}

func (c *productsApiClient) GetProducts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Products, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Products)
	err := c.cc.Invoke(ctx, ProductsApi_GetProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsApiClient) GetProductInfo(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductsApi_GetProductInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsApiClient) GetPing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pong)
	err := c.cc.Invoke(ctx, ProductsApi_GetPing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsApiServer is the server API for ProductsApi service.
// All implementations must embed UnimplementedProductsApiServer
// for forward compatibility.
type ProductsApiServer interface {
	GetProducts(context.Context, *empty.Empty) (*Products, error)
	GetProductInfo(context.Context, *ProductId) (*Product, error)
	GetPing(context.Context, *empty.Empty) (*Pong, error)
	mustEmbedUnimplementedProductsApiServer()
}

// UnimplementedProductsApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductsApiServer struct{}

func (UnimplementedProductsApiServer) GetProducts(context.Context, *empty.Empty) (*Products, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedProductsApiServer) GetProductInfo(context.Context, *ProductId) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductInfo not implemented")
}
func (UnimplementedProductsApiServer) GetPing(context.Context, *empty.Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPing not implemented")
}
func (UnimplementedProductsApiServer) mustEmbedUnimplementedProductsApiServer() {}
func (UnimplementedProductsApiServer) testEmbeddedByValue()                     {}

// UnsafeProductsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsApiServer will
// result in compilation errors.
type UnsafeProductsApiServer interface {
	mustEmbedUnimplementedProductsApiServer()
}

func RegisterProductsApiServer(s grpc.ServiceRegistrar, srv ProductsApiServer) {
	// If the following call pancis, it indicates UnimplementedProductsApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductsApi_ServiceDesc, srv)
}

func _ProductsApi_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsApiServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsApi_GetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsApiServer).GetProducts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsApi_GetProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsApiServer).GetProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsApi_GetProductInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsApiServer).GetProductInfo(ctx, req.(*ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsApi_GetPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsApiServer).GetPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductsApi_GetPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsApiServer).GetPing(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductsApi_ServiceDesc is the grpc.ServiceDesc for ProductsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productsapi.ProductsApi",
	HandlerType: (*ProductsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _ProductsApi_GetProducts_Handler,
		},
		{
			MethodName: "GetProductInfo",
			Handler:    _ProductsApi_GetProductInfo_Handler,
		},
		{
			MethodName: "GetPing",
			Handler:    _ProductsApi_GetPing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "productsapi.proto",
}
