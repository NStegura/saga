// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/business/iordercli.go

// Package mock_business is a generated GoMock package.
package mock_business

import (
	context "context"
	reflect "reflect"

	orders "github.com/NStegura/saga/tgbot/internal/clients/orders"
	gomock "github.com/golang/mock/gomock"
)

// MockIOrderCli is a mock of IOrderCli interface.
type MockIOrderCli struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderCliMockRecorder
}

// MockIOrderCliMockRecorder is the mock recorder for MockIOrderCli.
type MockIOrderCliMockRecorder struct {
	mock *MockIOrderCli
}

// NewMockIOrderCli creates a new mock instance.
func NewMockIOrderCli(ctrl *gomock.Controller) *MockIOrderCli {
	mock := &MockIOrderCli{ctrl: ctrl}
	mock.recorder = &MockIOrderCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderCli) EXPECT() *MockIOrderCliMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockIOrderCli) CreateOrder(ctx context.Context, userID int64, descr string, products []orders.Product) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, descr, products)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockIOrderCliMockRecorder) CreateOrder(ctx, userID, descr, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockIOrderCli)(nil).CreateOrder), ctx, userID, descr, products)
}

// GetOrder mocks base method.
func (m *MockIOrderCli) GetOrder(ctx context.Context, orderID int64) (orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderID)
	ret0, _ := ret[0].(orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockIOrderCliMockRecorder) GetOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockIOrderCli)(nil).GetOrder), ctx, orderID)
}

// GetOrderStatuses mocks base method.
func (m *MockIOrderCli) GetOrderStatuses(ctx context.Context, orderID int64) ([]orders.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatuses", ctx, orderID)
	ret0, _ := ret[0].([]orders.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatuses indicates an expected call of GetOrderStatuses.
func (mr *MockIOrderCliMockRecorder) GetOrderStatuses(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatuses", reflect.TypeOf((*MockIOrderCli)(nil).GetOrderStatuses), ctx, orderID)
}

// GetOrders mocks base method.
func (m *MockIOrderCli) GetOrders(ctx context.Context, userID int64) ([]orders.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID)
	ret0, _ := ret[0].([]orders.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockIOrderCliMockRecorder) GetOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockIOrderCli)(nil).GetOrders), ctx, userID)
}
