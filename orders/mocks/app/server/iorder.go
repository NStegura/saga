// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/server/iorder.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	reflect "reflect"

	models "github.com/NStegura/saga/orders/internal/services/order/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrder) CreateOrder(ctx context.Context, userID int64, description string, orderProducts []models.OrderProduct) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, description, orderProducts)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderMockRecorder) CreateOrder(ctx, userID, description, orderProducts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrder)(nil).CreateOrder), ctx, userID, description, orderProducts)
}

// GetOrder mocks base method.
func (m *MockOrder) GetOrder(ctx context.Context, orderID int64) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderID)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderMockRecorder) GetOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrder)(nil).GetOrder), ctx, orderID)
}

// GetOrderStates mocks base method.
func (m *MockOrder) GetOrderStates(ctx context.Context, orderID int64) ([]models.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStates", ctx, orderID)
	ret0, _ := ret[0].([]models.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStates indicates an expected call of GetOrderStates.
func (mr *MockOrderMockRecorder) GetOrderStates(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStates", reflect.TypeOf((*MockOrder)(nil).GetOrderStates), ctx, orderID)
}

// GetOrders mocks base method.
func (m *MockOrder) GetOrders(ctx context.Context, userID int64) ([]models.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID)
	ret0, _ := ret[0].([]models.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderMockRecorder) GetOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrder)(nil).GetOrders), ctx, userID)
}
