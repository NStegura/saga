// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/consumers/handlers/order/iproduct.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	reflect "reflect"

	models "github.com/NStegura/saga/products/internal/services/product/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// ReserveProducts mocks base method.
func (m *MockProduct) ReserveProducts(ctx context.Context, orderID int64, reserves []models.Reserve) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveProducts", ctx, orderID, reserves)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveProducts indicates an expected call of ReserveProducts.
func (mr *MockProductMockRecorder) ReserveProducts(ctx, orderID, reserves interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveProducts", reflect.TypeOf((*MockProduct)(nil).ReserveProducts), ctx, orderID, reserves)
}
