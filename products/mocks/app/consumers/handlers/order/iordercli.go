// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/consumers/handlers/order/iordercli.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	reflect "reflect"

	orders "github.com/NStegura/saga/products/internal/clients/orders"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderCli is a mock of OrderCli interface.
type MockOrderCli struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCliMockRecorder
}

// MockOrderCliMockRecorder is the mock recorder for MockOrderCli.
type MockOrderCliMockRecorder struct {
	mock *MockOrderCli
}

// NewMockOrderCli creates a new mock instance.
func NewMockOrderCli(ctrl *gomock.Controller) *MockOrderCli {
	mock := &MockOrderCli{ctrl: ctrl}
	mock.recorder = &MockOrderCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCli) EXPECT() *MockOrderCliMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOrderCli) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockOrderCliMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOrderCli)(nil).Close))
}

// GetProductsToReserve mocks base method.
func (m *MockOrderCli) GetProductsToReserve(OrderID int64) ([]orders.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsToReserve", OrderID)
	ret0, _ := ret[0].([]orders.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsToReserve indicates an expected call of GetProductsToReserve.
func (mr *MockOrderCliMockRecorder) GetProductsToReserve(OrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsToReserve", reflect.TypeOf((*MockOrderCli)(nil).GetProductsToReserve), OrderID)
}
