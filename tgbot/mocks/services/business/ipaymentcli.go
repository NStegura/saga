// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/business/ipaymentcli.go

// Package mock_business is a generated GoMock package.
package mock_business

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPaymentCli is a mock of IPaymentCli interface.
type MockIPaymentCli struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentCliMockRecorder
}

// MockIPaymentCliMockRecorder is the mock recorder for MockIPaymentCli.
type MockIPaymentCliMockRecorder struct {
	mock *MockIPaymentCli
}

// NewMockIPaymentCli creates a new mock instance.
func NewMockIPaymentCli(ctrl *gomock.Controller) *MockIPaymentCli {
	mock := &MockIPaymentCli{ctrl: ctrl}
	mock.recorder = &MockIPaymentCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentCli) EXPECT() *MockIPaymentCliMockRecorder {
	return m.recorder
}

// PayOrder mocks base method.
func (m *MockIPaymentCli) PayOrder(ctx context.Context, orderID int64, status bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayOrder", ctx, orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayOrder indicates an expected call of PayOrder.
func (mr *MockIPaymentCliMockRecorder) PayOrder(ctx, orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayOrder", reflect.TypeOf((*MockIPaymentCli)(nil).PayOrder), ctx, orderID, status)
}
